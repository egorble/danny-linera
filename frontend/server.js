const express = require('express');
const cors = require('cors');
const fs = require('fs');
const path = require('path');

const app = express();
const port = 3000;

// Middleware
app.use(cors());
app.use(express.json());

// Cross-origin isolation headers for WASM threads/SharedArrayBuffer
app.use((req, res, next) => {
    res.setHeader('Cross-Origin-Opener-Policy', 'same-origin');
    res.setHeader('Cross-Origin-Embedder-Policy', 'require-corp');
    next();
});

// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.use(express.static('.'));
app.use('/assets', express.static('assets'));
app.use('/css', express.static('css'));
app.use('/js', express.static('js'));
app.use('/@linera', express.static('@linera'));

// –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥–æ–º
const LEADERBOARD_FILE = path.join(__dirname, 'leaderboard.json');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–π–ª—É –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É
function initLeaderboard() {
    if (!fs.existsSync(LEADERBOARD_FILE)) {
        fs.writeFileSync(LEADERBOARD_FILE, JSON.stringify([]));
    }
}

// –ß–∏—Ç–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É
function readLeaderboard() {
    try {
        const data = fs.readFileSync(LEADERBOARD_FILE, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É:', error);
        return [];
    }
}

// –ó–∞–ø–∏—Å –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É
function writeLeaderboard(data) {
    try {
        fs.writeFileSync(LEADERBOARD_FILE, JSON.stringify(data, null, 2));
        return true;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É:', error);
        return false;
    }
}

// API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥
app.get('/api/leaderboard', (req, res) => {
    try {
        const leaderboard = readLeaderboard();
        // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤–±–∏–≤—Å—Ç–≤ (–Ω–∞–π–±—ñ–ª—å—à–µ —Å–ø–æ—á–∞—Ç–∫—É)
        leaderboard.sort((a, b) => b.kills - a.kills);
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–ø 50
        res.json(leaderboard.slice(0, 50));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É:', error);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
app.post('/api/leaderboard', (req, res) => {
    try {
        const { playerWallet, chainId, kills } = req.body;
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        if (!playerWallet || kills === undefined || kills < 0) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ' });
        }

        const leaderboard = readLeaderboard();
        const killsNum = parseInt(kills);
        
        // –®—É–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å –¥–ª—è —Ü—å–æ–≥–æ –ª–∞–Ω—Ü—é–≥–∞
        const existingEntryIndex = leaderboard.findIndex(entry => 
            entry.playerWallet === playerWallet && entry.chainId === chainId
        );
        
        let isNewRecord = false;
        let resultEntry;
        
        if (existingEntryIndex !== -1) {
            // –ó–∞–ø–∏—Å —ñ—Å–Ω—É—î - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–æ–≤–∏–π —Ä–µ–∫–æ—Ä–¥
            const existingEntry = leaderboard[existingEntryIndex];
            if (killsNum > existingEntry.kills) {
                // –ù–æ–≤–∏–π —Ä–µ–∫–æ—Ä–¥! –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å
                const previousKills = existingEntry.kills;
                existingEntry.kills = killsNum;
                existingEntry.timestamp = new Date().toISOString();
                existingEntry.previousRecord = previousKills;
                isNewRecord = true;
                resultEntry = existingEntry;
                console.log(`–ù–æ–≤–∏–π —Ä–µ–∫–æ—Ä–¥ –¥–ª—è ${playerWallet}: ${killsNum} (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π: ${previousKills})`);
            } else {
                // –ù–µ —Ä–µ–∫–æ—Ä–¥, –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ
                return res.json({ 
                    message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —î —Ä–µ–∫–æ—Ä–¥–æ–º',
                    currentRecord: existingEntry.kills,
                    yourScore: killsNum,
                    isNewRecord: false
                });
            }
        } else {
            // –ù–æ–≤–∏–π –≥—Ä–∞–≤–µ—Ü—å - –¥–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å
            resultEntry = {
                id: Date.now().toString(),
                playerWallet: playerWallet,
                chainId: chainId || 'unknown',
                kills: killsNum,
                timestamp: new Date().toISOString()
            };
            leaderboard.push(resultEntry);
            isNewRecord = true;
            console.log(`–ù–æ–≤–∏–π –≥—Ä–∞–≤–µ—Ü—å ${playerWallet} –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: ${killsNum}`);
        }
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ª—ñ–¥–µ—Ä–±–æ—Ä–¥
        if (writeLeaderboard(leaderboard)) {
            res.status(201).json({ 
                message: isNewRecord ? '–ù–æ–≤–∏–π —Ä–µ–∫–æ—Ä–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!' : '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ',
                entry: resultEntry,
                isNewRecord: isNewRecord,
                previousRecord: resultEntry.previousRecord || null
            });
        } else {
            res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è' });
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:', error);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û—á–∏—Å—Ç–∏—Ç–∏ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥ (–∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—è)
app.delete('/api/leaderboard', (req, res) => {
    try {
        const { adminKey } = req.body;
        
        // –ü—Ä–æ—Å—Ç–∏–π –∑–∞—Ö–∏—Å—Ç –∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó
        if (adminKey !== 'reset_leaderboard_2024') {
            return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ' });
        }
        
        if (writeLeaderboard([])) {
            res.json({ message: '–õ—ñ–¥–µ—Ä–±–æ—Ä–¥ –æ—á–∏—â–µ–Ω–æ' });
        } else {
            res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è' });
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É:', error);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
initLeaderboard();

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${port}`);
    console.log('üìä API –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É –¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞ /api/leaderboard');
    console.log('üì± Linera —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –≥–æ—Ç–æ–≤–∞ –¥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è!');
}); 